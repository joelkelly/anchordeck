'use strict';

/*
|--------------------------------------------------------------------------
| Main Module for AngularJS uploader
|--------------------------------------------------------------------------
|
*/
var uploader = angular.module('uploader', [])
    .config(['$interpolateProvider', function ($interpolateProvider) {
        // Adjust the templating of angularJS to avoid conflicts (w/ Twig, Blade, Moustache, etc...)
        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');
    }])
    .filter('byteCount', function() {
        // Adjust file size output so it is more user familiar
        return function(input) {
          var out;
          if(input > 1024*1024){
            out = (input / 1024 / 1024).toFixed(2) + 'MB';
          }
          else{
            out = Math.round(input / 1024) + 'KB';
          }
          return out;
        }
    });

/*
|--------------------------------------------------------------------------
| Directives / Controlers / Services
|--------------------------------------------------------------------------
|
*/
// @codekit-append "directives/fileThumbnail.js";
// @codekit-append "controllers/fileUploadCtrl.js";

/*
|--------------------------------------------------------------------------
| Non AngularJS site scripts
|--------------------------------------------------------------------------
|
*/
// @codekit-append "main.js";

/* **********************************************
     Begin fileThumbnail.js
********************************************** */

'use strict';

/*
|--------------------------------------------------------------------------
| Directive for generating a thumbnail
|--------------------------------------------------------------------------
|
*/
uploader.directive('thumbnail', function() {
    return {
        restrict: 'E',
        transclude: true,
        link: function(scope, element, attrs, ctrl) {

            /*
            |--------------------------------------------------------------------------
            | Create a filereader and setup onload
            |--------------------------------------------------------------------------
            |
            | Filreader is for modern browsers. In this instance it allows us to get file
            | information from our pending files before we upload them to the server
            |
            */
            var file_reader  = new FileReader();
            file_reader.onload = function (reader_event) {

                /*
                |--------------------------------------------------------------------------
                | Create an new image that we can resize into a thumbnail
                |--------------------------------------------------------------------------
                |
                | We are creating an image and once it is loaded we are loading it into a
                | canvas element so we can adjust the dimensions.
                | Credit to dropzonejs.org for this code.
                |
                */
                var temp_image = new Image;
                temp_image.onload = function() {
                    var canvas, ctx, srcHeight, srcRatio, srcWidth, srcX, srcY, thumbnail, trgHeight, trgRatio, trgWidth, trgX, trgY;

                    canvas = document.createElement("canvas");
                    ctx = canvas.getContext("2d");
                    srcX = 0;
                    srcY = 0;
                    srcWidth = temp_image.width;
                    srcHeight = temp_image.height;
                    canvas.width = 75;
                    canvas.height = 75;
                    trgX = 0;
                    trgY = 0;
                    trgWidth = canvas.width;
                    trgHeight = canvas.height;
                    srcRatio = temp_image.width / temp_image.height;
                    trgRatio = canvas.width / canvas.height;

                    // Figure out appropriate placement for image.
                    if (temp_image.height < canvas.height || temp_image.width < canvas.width) {
                        trgHeight = srcHeight;
                        trgWidth = srcWidth;
                    } else {
                        if (srcRatio > trgRatio) {
                            srcHeight = temp_image.height;
                            srcWidth = srcHeight * trgRatio;
                        } else {
                            srcWidth = temp_image.width;
                            srcHeight = srcWidth / trgRatio;
                        }
                    }
                    srcX = (temp_image.width - srcWidth) / 2;
                    srcY = (temp_image.height - srcHeight) / 2;
                    trgY = (canvas.height - trgHeight) / 2;
                    trgX = (canvas.width - trgWidth) / 2;

                    // Draw image into canvas at resized value;
                    ctx.drawImage(temp_image, srcX, srcY, srcWidth, srcHeight, trgX, trgY, trgWidth, trgHeight);

                    // Set source of our element to the base64 encoded image data.
                    element.attr('src', canvas.toDataURL("image/png"));
                };

                // Load the image source from the file that was read in
                temp_image.src = reader_event.target.result;
            };

            // Read the file
            file_reader.readAsDataURL(scope.file);
        },
        template:
            '<img ng-transclude class="thumbnail"/>',
        replace:true
    };
});


/* **********************************************
     Begin fileUploadCtrl.js
********************************************** */

'use strict';

function FileUploadCtrl($scope){

    $scope.pendingFiles = [];   // The pending file queue

    /*
    |--------------------------------------------------------------------------
    | Add files to pending file queue and apply them to the view
    |--------------------------------------------------------------------------
    |
    */
    $scope.addFiles = function($element){
        $scope.$apply(function($scope){
            for (var i = 0; i < $element.files.length; i++) {
                // Check to see that the element is not already in the queue
                if(!containsObject($element.files[i], $scope.pendingFiles)){
                    $scope.pendingFiles.push($element.files[i]);
                }
            }
            // Set progress bar to invisible
            $scope.progressVisible = false;
        });
    }

    /*
    |--------------------------------------------------------------------------
    | Loop through pending files and upload them
    |--------------------------------------------------------------------------
    |
    */
    $scope.uploadFiles = function(){
        for (var i in $scope.pendingFiles) {
            $scope.uploadFile($scope.pendingFiles[i]);
        }
    }

    /*
    |--------------------------------------------------------------------------
    | Upload an individual file
    |--------------------------------------------------------------------------
    |
    | Sets up and XHR response to the passed in file. Also sets up
    | eventListenters for progress and complete responses. Upon complete
    | it removes the file from the pending file queue
    |
    */
    $scope.uploadFile = function(file){

        var formData   = new FormData(),
            xhr         = new XMLHttpRequest()

        formData.append("file", file);

        // Event listener for upload progress
        xhr.upload.addEventListener("progress", uploadProgress, false)

        // Event listener for complete
        xhr.addEventListener("load", (function(evt){
            $scope.$apply(function($scope){ // $apply to show adjustments in the view
                $scope.pendingFiles.splice($scope.pendingFiles.indexOf(file), 1);
            });

            // Handle response ** TODO
            // evt.target.responseText;
        }), false);

        // Set progress bar to visible
        $scope.progressVisible = true;

         // Set XHR destination and send the data.
        xhr.open("POST", "/upload/post");
        xhr.send(formData);
    }

    /*
    |--------------------------------------------------------------------------
    | File upload progress handler
    |--------------------------------------------------------------------------
    |
    | Sets file progress to be displayed
    |
    */
    function uploadProgress(evt) {
        $scope.$apply(function(){
            if (evt.lengthComputable) {
                $scope.progress = Math.round(evt.loaded * 100 / evt.total)
            } else {
                $scope.progress = '...'
            }
        })
    }

    /*
    |--------------------------------------------------------------------------
    | Utility function to check if array contains object
    |--------------------------------------------------------------------------
    |
    | This is based on name and size of file due to the fact that a hashObject
    | is added when the object is added. So traditional array/object comparisons
    | are not effective.
    |
    */
    function containsObject(obj, list) {
        for (var i = 0; i < list.length; i++) {
            if (list[i].name === obj.name && list[i].size === obj.size) return true;
        }
        return false;
    }
}



/* **********************************************
     Begin jquery.emailaddressmunging.js
********************************************** */

(function ($) {
  "use strict";

  $.fn.emailAddressMunging = function (opts) {

    return this.each(function () {
      var $el = $(this);

      // get email address
      var mail = $.fn.emailAddressMunging._createEmail($el.text());

      var attributes = {};
      // copy attributes from old element
      $.each(this.attributes, function (i, attr) {

        // dont overwrite our href and workarounds for IE
        if (attr.value !== 'null' && attr.value !== '' && attr.name !== 'dataFormatAs' && attr.name !== 'href' && attr.name !== 'data-link-copy') {
          attributes[attr.name] = attr.value;
        }
      });
      var link_copy = ($el.attr('data-link-copy') !== undefined) ? $el.attr('data-link-copy') : mail;

      // make a new link element with email address
      var $newEl = $('<a href="mailto:' + mail + '">' + link_copy + '</a>').attr(attributes);

      // replace existing element with our new one
      $el.replaceWith($newEl);
    });
  };

  // creates the email adress from the parsed string
  $.fn.emailAddressMunging._createEmail = function (mail) {
    // replace (at) and [at]
    mail = mail.replace(/(\[|\()at(\]|\))/i, '@');

    // replace (dot) and [dot]
    mail = mail.replace(/(\[|\()dot(\]|\))/ig, '.');

    // remove white space
    mail = mail.replace(/ /g, '');

    return mail;
  };
}(jQuery));

/* **********************************************
     Begin main.js
********************************************** */

$(function(){

    $(".email").emailAddressMunging();

    $('.drop-click').click(function(){
        $(this).toggleClass('dropped').next().toggle();
    });
});
